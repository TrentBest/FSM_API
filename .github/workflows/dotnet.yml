name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: [ '8.0.x' ]

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore dependencies
      # Restore for the entire solution if you have a solution file in the root,
      # or specify the main project if that's how you manage it.
      run: dotnet restore FSM_API/FSM_API.csproj

    - name: Build
      # Build your main library project and the test project
      run: dotnet build FSM_API/FSM_API.csproj --no-restore --configuration Release

    # --- Code Coverage Steps START ---

    - name: Install dotnet-coverage tool
      run: dotnet tool install --global dotnet-coverage

    - name: Run Tests with Code Coverage
      # Set the working directory explicitly to the repository root.
      # This ensures all paths within this step are relative to the repo root.
      working-directory: ${{ github.workspace }}
      run: |
        # CRITICAL FIX: Target the COMPILED TEST DLL directly.
        # This bypasses dotnet test's project resolution and directly executes tests from the assembly.
        # --collect "Code Coverage" enables the built-in coverage data collection.
        # --include-by-assembly FSM_API: Tells dotnet-coverage to only include coverage for your FSM_API library.
        dotnet-coverage collect "dotnet test Tests/bin/Release/net8.0/FSM_API.Tests.dll --no-build --collect \"Code Coverage\"" \
          -f xml \
          -o "coverage.xml" \
          --include-by-assembly FSM_API

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml # Path to the generated coverage report file (relative to working-directory)
        token: ${{ secrets.CODECOV_TOKEN }} # Retrieves your Codecov token from GitHub Secrets
        verbose: true # Optional: enable verbose logging for debugging

    # --- Code Coverage Steps END ---
    
    - name: Upload FSM_API DLL Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fsm-api-dll
        # Path to the compiled DLL for .NET Standard 2.0 after a Release build
        path: FSM_API/bin/Release/netstandard2.0/FSM_API.dll
        retention-days: 1

  # The 'publish_nuget' job is commented out as it should not run with every build.
  # Uncomment this entire section when you are ready to publish a new NuGet package.
  # publish_nuget:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: 8.0.x

  #     - name: Download FSM_API DLL Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: fsm-api-dll
  #         path: .

  #     - name: Pack
  #       run: dotnet pack FSM_API/FSM_API.csproj --no-build --configuration Release -o nuget-packages

  #     - name: Publish to NuGet.org
  #       run: dotnet nuget push "nuget-packages/*.nupkg" --api-key "${{ secrets.NUGET_API_KEY }}" --source "https://api.nuget.org/v3/index.json"

  push_dll_to_fsm_api_unity:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout FSM_API_Unity Repository
        uses: actions/checkout@v4
        with:
          repository: 'TrentBest/FSM_API_Unity'
          token: ${{ secrets.PAT }}
          path: './fsm_api_unity_repo'

      - name: Download FSM_API DLL Artifact for FSM_API_Unity
        uses: actions/download-artifact@v4
        with:
          name: fsm-api-dll
          path: .

      - name: Create Plugins directory in FSM_API_Unity
        run: mkdir -p ./fsm_api_unity_repo/Assets/FSM_API/Plugins/
        shell: bash

      - name: Update DLL in FSM_API_Unity Repo
        run: |
          cp FSM_API.dll ./fsm_api_unity_repo/Assets/FSM_API/Plugins/
        shell: bash

      - name: Commit and Push to FSM_API_Unity Repo
        run: |
          cd ./fsm_api_unity_repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add Assets/FSM_API/Plugins/FSM_API.dll
          git commit -m "Automated: Update FSM_API.dll from CI build"
          git push
        shell: bash

  push_dll_to_rawwar:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout raWWar Repository
        uses: actions/checkout@v4
        with:
          repository: 'TrentBest/raWWar'
          token: ${{ secrets.PAT }}
          path: './rawwar_repo'
          ref: 'Alpha'

      - name: Download FSM_API DLL Artifact for raWWar
        uses: actions/download-artifact@v4
        with:
          name: fsm-api-dll
          path: .

      - name: Create Plugins directory in raWWar
        run: mkdir -p ./rawwar_repo/Assets/Plugins/
        shell: bash

      - name: Update DLL in raWWar Repo
        run: |
          cp FSM_API.dll ./rawwar_repo/Assets/Plugins/
        shell: bash

      - name: Commit and Push to raWWar Repo
        run: |
          cd ./rawwar_repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add Assets/Plugins/FSM_API.dll
          git commit -m "Automated: Update FSM_API.dll from FSM_API CI build"
          git push origin Alpha
        shell: bash
