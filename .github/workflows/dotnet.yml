name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: [ '8.0.x' ]

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore Solution Dependencies
      working-directory: ${{ github.workspace }}
      run: dotnet restore FSM_API.sln

    - name: Build Main Project
      working-directory: ${{ github.workspace }}
      run: dotnet build FSM_API/FSM_API.csproj --no-restore --configuration Release

    - name: Build Test Project
      working-directory: ${{ github.workspace }}
      run: dotnet build Tests/FSM_API.Tests.csproj --no-restore --configuration Release

    # --- Code Coverage Steps ---
    # We now create a runsettings file to properly configure the code coverage collector.
    - name: Create Coverlet Runsettings File
      run: |
        echo '<RunSettings>' > coverlet.runsettings
        echo '  <DataCollectionRunSettings>' >> coverlet.runsettings
        echo '    <DataCollectors>' >> coverlet.runsettings
        echo '      <DataCollector friendlyName="XPlat Code Coverage" uri="ms-dotnet-coverage://microsoft.com/CodeCoverage/v1" assemblyQualifiedName="Microsoft.VisualStudio.Coverage.NetCore.DataCollector.CoverageDataCollector, Microsoft.VisualStudio.Coverage.NetCore.DataCollector, Version=17.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">' >> coverlet.runsettings
        echo '        <Configuration>' >> coverlet.runsettings
        echo '          <Format>cobertura</Format>' >> coverlet.runsettings
        echo '          <FileName>coverage.cobertura.xml</FileName>' >> coverlet.runsettings
        echo '        </Configuration>' >> coverlet.runsettings
        echo '      </DataCollector>' >> coverlet.runsettings
        echo '    </DataCollectors>' >> coverlet.runsettings
        echo '  </DataCollectionRunSettings>' >> coverlet.runsettings
        echo '</RunSettings>' >> coverlet.runsettings

    - name: Run Tests with Code Coverage
      working-directory: ${{ github.workspace }}
      run: |
        dotnet test Tests/FSM_API.Tests.csproj \
          --no-build \
          --no-restore \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger "trx;LogFileName=testresults.trx" \
          --settings coverlet.runsettings
      shell: bash

    - name: Find coverage report path
      id: find_coverage_path
      working-directory: ${{ github.workspace }}
      run: |
        COVERAGE_FILE=$(find ./TestResults -name "coverage.cobertura.xml" | head -n 1)
        if [ -z "$COVERAGE_FILE" ]; then
          echo "ERROR: Code coverage file 'coverage.cobertura.xml' not found!"
          exit 1
        fi
        echo "Found coverage file: $COVERAGE_FILE"
        echo "coverage_file=$COVERAGE_OUTPUT" >> $GITHUB_OUTPUT
      shell: bash

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ${{ steps.find_coverage_path.outputs.coverage_file }}
        flags: unittests
        name: FSM-API-Codecov
        fail_ci_if_error: true
        verbose: true
# -------------------------------------------------------------

    - name: Upload FSM_API DLL Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fsm-api-dll
        path: FSM_API/bin/Release/netstandard2.0/FSM_API.dll
        retention-days: 1

  publish_nuget:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      - name: Restore Solution Dependencies
        working-directory: ${{ github.workspace }}
        run: dotnet restore FSM_API.sln

      - name: Pack
        run: dotnet pack FSM_API/FSM_API.csproj --no-build --configuration Release -o nuget-packages

      - name: Publish to NuGet.org
        run: dotnet nuget push "nuget-packages/*.nupkg" --api-key "${{ secrets.NUGET_API_KEY }}" --source "https://api.nuget.org/v3/index.json"

  push_dll_to_fsm_api_unity:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout FSM_API_Unity Repository
        uses: actions/checkout@v4
        with:
          repository: 'TrentBest/FSM_API_Unity'
          token: ${{ secrets.PAT }}
          path: './fsm_api_unity_repo'

      - name: Download FSM_API DLL Artifact for FSM_API_Unity
        uses: actions/download-artifact@v4
        with:
          name: fsm-api-dll
          path: .

      - name: Create Plugins directory in FSM_API_Unity
        run: mkdir -p ./fsm_api_unity_repo/Assets/FSM_API/Plugins/
        shell: bash

      - name: Update DLL in FSM_API_Unity Repo
        run: |
          cp FSM_API.dll ./fsm_api_unity_repo/Assets/FSM_API/Plugins/
        shell: bash

      - name: Commit and Push to FSM_API_Unity Repo
        run: |
          cd ./fsm_api_unity_repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add Assets/FSM_API/Plugins/FSM_API.dll
          git commit -m "Automated: Update FSM_API.dll from CI build"
          git push
        shell: bash

  push_dll_to_rawwar:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout raWWar Repository
        uses: actions/checkout@v4
        with:
          repository: 'TrentBest/raWWar'
          token: ${{ secrets.PAT }}
          path: './rawwar_repo'
          ref: 'Alpha'

      - name: Download FSM_API DLL Artifact for raWWar
        uses: actions/download-artifact@v4
        with:
          name: fsm-api-dll
          path: .

      - name: Create Plugins directory in raWWar
        run: mkdir -p ./rawwar_repo/Assets/Plugins/
        shell: bash

      - name: Update DLL in raWWar Repo
        run: |
          cp FSM_API.dll ./rawwar_repo/Assets/Plugins/
        shell: bash

      - name: Commit and Push to raWWar Repo
        run: |
          cd ./rawwar_repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add Assets/Plugins/FSM_API.dll
          git commit -m "Automated: Update FSM_API.dll from FSM_API CI build"
          git push origin Alpha
        shell: bash
