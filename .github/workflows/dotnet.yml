# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ] # Assumes your FSM_API repo's main branch is 'master'
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    # Reverted back to ubuntu-latest as only .NET 8.0.x is being built, which is compatible.
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Building only against .NET 8.0.x as requested
        # NOTE: This matrix entry is for the SDK version used to build, not the target framework.
        # Your csproj's TargetFrameworks property handles the actual target frameworks.
        dotnet-version: [ '8.0.x' ]

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    # The 'Install libssl1.1' step is no longer needed as .NET 3.1.x is removed from the matrix.

    - name: Restore dependencies
      # Specify the path to your .csproj file
      run: dotnet restore FSM_API/FSM_API.csproj

    - name: Build
      # Specify the path to your .csproj file
      run: dotnet build FSM_API/FSM_API.csproj --no-restore --configuration Release

    - name: Test
      # Specify the path to your .csproj file
      run: dotnet test FSM_API/FSM_API.csproj --no-build --verbosity normal

    # Upload the compiled DLL as an artifact so it can be used by subsequent jobs
    - name: Upload FSM_API DLL Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fsm-api-dll
        # Path to the compiled DLL after a Release build for .NET Standard 2.0
        path: FSM_API/bin/Release/netstandard2.0/FSM_API.dll # <--- CRITICAL CHANGE HERE
        retention-days: 1 # Keep the artifact for 1 day

  # The 'publish_nuget' job is commented out as it should not run with every build.
  # Uncomment this entire section when you are ready to publish a new NuGet package.
  # publish_nuget:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: 8.0.x

  #     # Download the DLL artifact uploaded by the 'build' job
  #     - name: Download FSM_API DLL Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: fsm-api-dll
  #         path: . # Downloads to the current working directory of this job, usually the root of the workspace

  #     - name: Pack
  #       run: dotnet pack FSM_API/FSM_API.csproj --no-build --configuration Release -o nuget-packages

  #     - name: Publish to NuGet.org
  #       run: dotnet nuget push "nuget-packages/*.nupkg" --api-key "${{ secrets.NUGET_API_KEY }}" --source "https://api.nuget.org/v3/index.json"

  #     # Removed the redundant 'Upload DLL as Artifact' step from here, as it's now done in the 'build' job.

  push_dll_to_fsm_api_unity: # Renamed for clarity, this is your original job
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout FSM_API_Unity Repository
        uses: actions/checkout@v4
        with:
          repository: 'TrentBest/FSM_API_Unity'
          token: ${{ secrets.PAT }}
          path: './fsm_api_unity_repo' # Changed path to avoid conflict with raWWar repo checkout

      - name: Download FSM_API DLL Artifact for FSM_API_Unity
        uses: actions/download-artifact@v4
        with:
          name: fsm-api-dll
          path: . # Downloads to the current working directory of this job

      - name: Create Plugins directory in FSM_API_Unity
        run: mkdir -p ./fsm_api_unity_repo/Assets/FSM_API/Plugins/
        shell: bash

      - name: Update DLL in FSM_API_Unity Repo
        run: |
          cp FSM_API.dll ./fsm_api_unity_repo/Assets/FSM_API/Plugins/
        shell: bash

      - name: Commit and Push to FSM_API_Unity Repo
        run: |
          cd ./fsm_api_unity_repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add Assets/FSM_API/Plugins/FSM_API.dll
          git commit -m "Automated: Update FSM_API.dll from CI build"
          git push
        shell: bash

  push_dll_to_rawwar: # NEW JOB: Pushes DLL to your raWWar repo
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' # Trigger on push to master in FSM_API repo

    steps:
      - name: Checkout raWWar Repository
        uses: actions/checkout@v4
        with:
          repository: 'TrentBest/raWWar' # Replace with your actual raWWar repo path if different
          token: ${{ secrets.PAT }} # Reusing the PAT, ensure it has write access to raWWar
          path: './rawwar_repo'
          ref: 'Alpha' # Target the Alpha branch for development integration

      - name: Download FSM_API DLL Artifact for raWWar
        uses: actions/download-artifact@v4
        with:
          name: fsm-api-dll
          path: . # Downloads to the current working directory of this job

      - name: Create Plugins directory in raWWar
        run: mkdir -p ./rawwar_repo/Assets/Plugins/
        shell: bash

      - name: Update DLL in raWWar Repo
        run: |
          cp FSM_API.dll ./rawwar_repo/Assets/Plugins/
        shell: bash

      - name: Commit and Push to raWWar Repo
        run: |
          cd ./rawwar_repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add Assets/Plugins/FSM_API.dll
          git commit -m "Automated: Update FSM_API.dll from FSM_API CI build"
          git push origin Alpha # Push to the Alpha branch
        shell: bash
