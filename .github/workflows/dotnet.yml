name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        # Use .NET 8, which supports building for .NET Standard 2.1
        dotnet-version: '8.0.x' 
    - name: Restore Solution Dependencies
      # Restore for the specific framework Unity needs
      run: dotnet restore FSM_API.sln

    - name: Build Project for Unity
      # Build the FSM API specifically for .NET Standard 2.1
      run: dotnet build FSM_API/FSM_API.csproj --no-restore --configuration Release --framework netstandard2.1

    - name: Run Tests with Code Coverage
      # Run tests against the same framework as the build
      run: |
        dotnet test Tests/FSM_API.Tests.csproj \
          --configuration Release \
          --framework netstandard2.1 \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger "trx;LogFileName=testresults.trx"
      shell: bash

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./TestResults/**/coverage.cobertura.xml
        fail_ci_if_error: true

    - name: Upload DLL as Artifact
      # The DLL is now guaranteed to be the correct version
      uses: actions/upload-artifact@v4
      with:
        name: fsm-api-dll
        path: FSM_API/bin/Release/netstandard2.1/FSM_API.dll

  deploy_to_unity_repo:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Download DLL Artifact
      uses: actions/download-artifact@v4
      with:
        name: fsm-api-dll
        path: ./
        
    - name: Checkout Unity repo
      uses: actions/checkout@v4
      with:
        repository: 'TrentBest/FSM_API_Unity'
        token: ${{ secrets.UNITY_REPO_PAT }}
        path: FSM_API_Unity_repo
        
    - name: Copy DLL to Unity repo directory
      run: |
        cp FSM_API.dll FSM_API_Unity_repo/

    - name: Commit and Push to Unity repo
      run: |
        cd FSM_API_Unity_repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add FSM_API.dll
        git commit -m "Auto-update FSM_API.dll from CI" || echo "No changes to commit"
        git push
        
  publish_nuget:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && vars.NUGET_PUBLISH_ENABLED == 'true'

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore Solution
      run: dotnet restore FSM_API.sln
    - name: Build Solution for All Frameworks
      run: dotnet build FSM_API.sln --configuration Release
    - name: Pack
      run: dotnet pack FSM_API/FSM_API.csproj --no-build --configuration Release -o nuget-packages
    - name: Publish to NuGet.org
      run: dotnet nuget push "nuget-packages/*.nupkg" --api-key "${{ secrets.NUGET_API_KEY }}" --source "https://api.nuget.org/v3/index.json"
