# This workflow is designed to build the .NET solution, run tests with code coverage,
# and conditionally publish the NuGet package to the remote repository.

name: .NET

# The workflow will run on push and pull requests to the main branch.
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Define the jobs to be executed.
jobs:
  build:
    # Use the latest Ubuntu environment for the build agent.
    runs-on: ubuntu-latest

    # The strategy matrix allows the job to run for multiple .NET versions.
    # We've updated this to include all target frameworks mentioned in your csproj.
    # This ensures each of these frameworks is built and tested.
    strategy:
      matrix:
        dotnet-version: ['8.0.x', '7.0.x', '6.0.x', '5.0.x', '3.1.x', '2.1.x']
        # Note: netstandard2.1 and netstandard2.0 will be built by these SDKs.

    steps:
    # Check out the repository code.
    - uses: actions/checkout@v4
    
    # Set up the .NET SDK. The version is taken from the matrix.
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    # Restore all dependencies for the entire solution file.
    - name: Restore Solution Dependencies
      working-directory: ${{ github.workspace }}
      run: dotnet restore FSM_API.sln

    # Build the entire solution, which will build all projects (FSM_API and Tests).
    - name: Build Solution
      working-directory: ${{ github.workspace }}
      run: dotnet build FSM_API.sln --no-restore --configuration Release

    # We can skip a separate build step for the test project since the solution build handles it.

    # --- Code Coverage Steps ---
    # Create a runsettings file to properly configure the code coverage collector.
    - name: Create Coverlet Runsettings File
      run: |
        echo '<RunSettings>' > coverlet.runsettings
        echo '  <DataCollectionRunSettings>' >> coverlet.runsettings
        echo '    <DataCollectors>' >> coverlet.runsettings
        echo '      <DataCollector friendlyName="XPlat Code Coverage" uri="ms-dotnet-coverage://microsoft.com/CodeCoverage/v1" assemblyQualifiedName="Microsoft.VisualStudio.Coverage.NetCore.DataCollector.CoverageDataCollector, Microsoft.VisualStudio.Coverage.NetCore.DataCollector, Version=17.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">' >> coverlet.runsettings
        echo '        <Configuration>' >> coverlet.runsettings
        echo '          <Format>cobertura</Format>' >> coverlet.runsettings
        echo '          <FileName>coverage.cobertura.xml</FileName>' >> coverlet.runsettings
        echo '        </Configuration>' >> coverlet.runsettings
        echo '      </DataCollector>' >> coverlet.runsettings
        echo '    </DataCollectors>' >> coverlet.runsettings
        echo '  </DataCollectionRunSettings>' >> coverlet.runsettings
        echo '</RunSettings>' >> coverlet.runsettings
      shell: bash

    # Run the tests with code coverage enabled.
    - name: Run Tests with Code Coverage
      working-directory: ${{ github.workspace }}
      run: |
        dotnet test Tests/FSM_API.Tests.csproj \
          --no-build \
          --no-restore \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger "trx;LogFileName=testresults.trx" \
          --settings coverlet.runsettings
      shell: bash

    # Find the path to the generated coverage report.
    - name: Find coverage report path
      id: find_coverage_path
      working-directory: ${{ github.workspace }}
      run: |
        COVERAGE_FILE=$(find ./TestResults -name "coverage.cobertura.xml" | head -n 1)
        if [ -z "$COVERAGE_FILE" ]; then
          echo "ERROR: Code coverage file 'coverage.cobertura.xml' not found!"
          exit 1
        fi
        echo "Found coverage file: $COVERAGE_FILE"
        echo "coverage_file=$COVERAGE_FILE" >> $GITHUB_OUTPUT
      shell: bash

    # Upload the coverage reports to Codecov.
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ${{ steps.find_coverage_path.outputs.coverage_file }}
        flags: unittests
        name: FSM-API-Codecov
        fail_ci_if_error: true
        verbose: true
      # --- End of Code Coverage Steps ---

  publish_nuget:
    # This job depends on the successful completion of the 'build' job.
    needs: build
    # This job will also run on the latest Ubuntu.
    runs-on: ubuntu-latest
    # The publish job is disabled by default. Uncomment it when you are ready to publish a new package.
    # if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Pack
        run: dotnet pack FSM_API/FSM_API.csproj --no-build --configuration Release -o nuget-packages

      - name: Publish to NuGet.org
        run: dotnet nuget push "nuget-packages/*.nupkg" --api-key "${{ secrets.NUGET_API_KEY }}" --source "https://api.nuget.org/v3/index.json"
