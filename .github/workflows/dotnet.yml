name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: [ '8.0.x' ]

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore Solution Dependencies
      working-directory: ${{ github.workspace }}
      run: dotnet restore FSM_API.sln

    - name: Build Main Project
      working-directory: ${{ github.workspace }}
      run: dotnet build FSM_API/FSM_API.csproj --no-restore --configuration Release

    - name: Build Test Project
      working-directory: ${{ github.workspace }}
      run: dotnet build Tests/FSM_API.Tests.csproj --no-restore --configuration Release

    # --- Code Coverage Steps START ---

    - name: Install dotnet-coverage tool
      run: dotnet tool install --global dotnet-coverage

    - name: Run Tests with Code Coverage
      working-directory: ${{ github.workspace }}
      run: |
        # Diagnostic: List the contents of the test DLL directory right before execution
        echo "Verifying test DLL existence and path:"
        ls -l Tests/bin/Release/net8.0/FSM_API.Tests.dll || { echo "ERROR: Test DLL not found at expected path prior to dotnet-coverage!"; exit 1; }
        
        # Diagnostic: Print the working directory and the exact command being passed
        echo "Current working directory for dotnet-coverage: $(pwd)"
        TEST_COMMAND="dotnet test Tests/bin/Release/net8.0/FSM_API.Tests.dll --no-build --collect \"Code Coverage\""
        echo "Command passed to dotnet-coverage: ${TEST_COMMAND}"
        
        # Now, execute dotnet-coverage
        dotnet-coverage collect "${TEST_COMMAND}" \
          -f xml \
          -o "coverage.xml" \
          --include-by-assembly FSM_API

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

    # --- Code Coverage Steps END ---
    
    - name: Upload FSM_API DLL Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fsm-api-dll
        path: FSM_API/bin/Release/netstandard2.0/FSM_API.dll
        retention-days: 1

  # The 'publish_nuget' job is commented out as it should not run with every build.
  # Uncomment this entire section when you are ready to publish a new NuGet package.
  # publish_nuget:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: 8.0.x

  #     - name: Download FSM_API DLL Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: fsm-api-dll
  #         path: .

  #     - name: Pack
  #       run: dotnet pack FSM_API/FSM_API.csproj --no-build --configuration Release -o nuget-packages

  #     - name: Publish to NuGet.org
  #       run: dotnet nuget push "nuget-packages/*.nupkg" --api-key "${{ secrets.NUGET_API_KEY }}" --source "https://api.nuget.org/v3/index.json"

  push_dll_to_fsm_api_unity:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout FSM_API_Unity Repository
        uses: actions/checkout@v4
        with:
          repository: 'TrentBest/FSM_API_Unity'
          token: ${{ secrets.PAT }}
          path: './fsm_api_unity_repo'

      - name: Download FSM_API DLL Artifact for FSM_API_Unity
        uses: actions/download-artifact@v4
        with:
          name: fsm-api-dll
          path: .

      - name: Create Plugins directory in FSM_API_Unity
        run: mkdir -p ./fsm_api_unity_repo/Assets/FSM_API/Plugins/
        shell: bash

      - name: Update DLL in FSM_API_Unity Repo
        run: |
          cp FSM_API.dll ./fsm_api_unity_repo/Assets/FSM_API/Plugins/
        shell: bash

      - name: Commit and Push to FSM_API_Unity Repo
        run: |
          cd ./fsm_api_unity_repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add Assets/FSM_API/Plugins/FSM_API.dll
          git commit -m "Automated: Update FSM_API.dll from CI build"
          git push
        shell: bash

  push_dll_to_rawwar:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout raWWar Repository
        uses: actions/checkout@v4
        with:
          repository: 'TrentBest/raWWar'
          token: ${{ secrets.PAT }}
          path: './rawwar_repo'
          ref: 'Alpha'

      - name: Download FSM_API DLL Artifact for raWWar
        uses: actions/download-artifact@v4
        with:
          name: fsm-api-dll
          path: .

      - name: Create Plugins directory in raWWar
        run: mkdir -p ./rawwar_repo/Assets/Plugins/
        shell: bash

      - name: Update DLL in raWWar Repo
        run: |
          cp FSM_API.dll ./rawwar_repo/Assets/Plugins/
        shell: bash

      - name: Commit and Push to raWWar Repo
        run: |
          cd ./rawwar_repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add Assets/Plugins/FSM_API.dll
          git commit -m "Automated: Update FSM_API.dll from FSM_API CI build"
          git push origin Alpha
        shell: bash
